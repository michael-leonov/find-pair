{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://find-pair/./src/js/http-request.js","webpack://find-pair/./src/main.js"],"sourcesContent":["const noop = () => {};\nexport function httpRequest({\n  method = 'GET',\n  url,\n  type = 'json',\n  onSuccess = noop,\n  onError = noop,\n}) {\n  const request = new XMLHttpRequest();\n\n  request.open(method, url);\n  request.responseType = type;\n\n  request.send();\n\n  request.addEventListener('load', () => {\n    if (request.status === 200) {\n      onSuccess(request.response);\n    } else {\n      onError(request.response || 'Неизвестная ошибка');\n    }\n  });\n\n  request.addEventListener('error', () => {\n    onError('Сеть недоступна');\n  });\n}\n","import './css/style.css';\nimport { httpRequest } from './js/http-request.js';\n\nwindow.statusComplexity = {\n  status: 0,\n};\n\nconst cardPrefixSpades = '../static/spades_img/';\nconst cardPostfixSpades = '_spades.jpg';\n\nconst cardsSpades = {\n  ace: `${cardPrefixSpades}ace${cardPostfixSpades}`,\n  king: `${cardPrefixSpades}king${cardPostfixSpades}`,\n  queen: `${cardPrefixSpades}queen${cardPostfixSpades}`,\n  jack: `${cardPrefixSpades}jack${cardPostfixSpades}`,\n  ten: `${cardPrefixSpades}ten${cardPostfixSpades}`,\n  nine: `${cardPrefixSpades}nine${cardPostfixSpades}`,\n  eight: `${cardPrefixSpades}eight${cardPostfixSpades}`,\n  seven: `${cardPrefixSpades}seven${cardPostfixSpades}`,\n  six: `${cardPrefixSpades}six${cardPostfixSpades}`,\n};\n\nconst complexityTypes = [].map.call(\n  document.querySelectorAll('[data-complexity]'),\n  (el) => {\n    return el;\n  }\n);\n\nconst startBtn = document.querySelector('.start-btn');\n\nfunction chooseComplexity(types) {\n  types.forEach((element) =>\n    element.addEventListener('click', () => {\n      types.forEach((element) => {\n        element.classList.remove('choosen');\n      });\n      element.classList.toggle('choosen');\n      if (element.classList.contains('choosen')) {\n        window.statusComplexity.status = Number(element.dataset.complexity);\n        startBtn.disabled = false;\n      } else {\n        delete window.tatusComplexity.status;\n      }\n    })\n  );\n}\n\nchooseComplexity(complexityTypes);\n\nstartBtn.addEventListener('click', (event) => {\n  event.preventDefault();\n  if (window.statusComplexity.status === 0) {\n    document.querySelector('.complexity__inner').append('Сложность не выбрана');\n    event.target.disabled = true;\n  } else {\n    // eslint-disable-next-line no-undef\n    httpRequest({\n      url: './field.html',\n      type: 'text',\n      onSuccess: (data) => {\n        document.body.innerHTML = data;\n\n        const fieldCards = document.querySelector('.field__main');\n        const countStatus = window.statusComplexity.status;\n\n        (function generateCards() {\n          for (let i = 0; i < 3 * countStatus; i++) {\n            for (let j = 0; j < 2; j++) {\n              const cardWrapper = document.createElement('div');\n              cardWrapper.classList.add('card-wrapper');\n              cardWrapper.dataset.rang = Object.keys(cardsSpades)[i];\n\n              const frontCardImg = new Image();\n              frontCardImg.src = Object.values(cardsSpades)[i];\n              frontCardImg.classList.add('shirt-front');\n\n              cardWrapper.appendChild(frontCardImg);\n\n              const backCardImg = new Image();\n              backCardImg.src = '../static/shirt-card.jpg';\n              backCardImg.classList.add('shirt-back');\n\n              cardWrapper.appendChild(backCardImg);\n\n              fieldCards.appendChild(cardWrapper);\n            }\n          }\n        })();\n\n        const cards = document.querySelectorAll('.card-wrapper');\n\n        cards.forEach((el) => {\n          el.classList.add('flip');\n          el.style.pointerEvents = 'none';\n\n          setTimeout(() => {\n            el.classList.remove('flip');\n            el.style.pointerEvents = 'auto';\n          }, 5000);\n        });\n\n        let hasFlippedCard = false;\n        let lockBoard = false;\n        let firstCard, secondCard;\n\n        function flipCard() {\n          if (lockBoard) return;\n\n          if (this === firstCard) return;\n\n          this.classList.add('flip');\n\n          if (!hasFlippedCard) {\n            hasFlippedCard = true;\n            firstCard = this;\n            return;\n          }\n\n          secondCard = this;\n\n          checkForMatch();\n\n          const winGame = Array.from(cards).every((card) =>\n            card.classList.contains('flip')\n          );\n          if (winGame) alert('Победили!');\n        }\n\n        function checkForMatch() {\n          firstCard.dataset.rang === secondCard.dataset.rang\n            ? disableCards()\n            : unflipCards();\n        }\n\n        function disableCards() {\n          firstCard.removeEventListener('click', flipCard);\n          secondCard.removeEventListener('click', flipCard);\n\n          resetBoard();\n        }\n\n        function unflipCards() {\n          lockBoard = true;\n          setTimeout(() => {\n            firstCard.classList.remove('flip');\n            secondCard.classList.remove('flip');\n\n            resetBoard();\n\n            alert('Проиграли!');\n          }, 500);\n        }\n\n        function resetBoard() {\n          [hasFlippedCard, lockBoard] = [false, false];\n          [firstCard, secondCard] = [null, null];\n        }\n\n        (function shuffle() {\n          cards.forEach((card) => {\n            const randomPos = Math.floor(Math.random() * (3 * countStatus));\n            card.style.order = randomPos;\n          });\n        })();\n\n        cards.forEach((card) => card.addEventListener('click', flipCard));\n      },\n    });\n  }\n});\n"],"names":["noop","window","statusComplexity","status","cardPrefixSpades","cardsSpades","ace","king","queen","jack","ten","nine","eight","seven","six","complexityTypes","map","call","document","querySelectorAll","el","startBtn","querySelector","types","forEach","element","addEventListener","classList","remove","toggle","contains","Number","dataset","complexity","disabled","tatusComplexity","event","preventDefault","append","target","method","url","type","onSuccess","onError","request","XMLHttpRequest","open","responseType","send","response","httpRequest","data","body","innerHTML","fieldCards","countStatus","i","j","cardWrapper","createElement","add","rang","Object","keys","frontCardImg","Image","src","values","appendChild","backCardImg","cards","style","pointerEvents","setTimeout","firstCard","secondCard","hasFlippedCard","lockBoard","flipCard","this","removeEventListener","resetBoard","alert","Array","from","every","card","randomPos","Math","floor","random","order"],"sourceRoot":""}